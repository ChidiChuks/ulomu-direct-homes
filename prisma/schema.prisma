
// Add these models to your schema.prisma

model Property {
  id          String    @id @default(uuid())
  name        String
  address     String
  units       Unit[]
  landlordId  String
  landlord    User      @relation(fields: [landlordId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Adding property type to distinguish between residential and agricultural properties
  propertyType String   @default("RESIDENTIAL")  // RESIDENTIAL or AGRICULTURAL
  maintenanceRequests MaintenanceRequest[]
  // For agricultural properties
  size        Float?    // size in acres
  soilType    String?
  waterSource String?
  farmRentals FarmRental[]
}

model Unit {
  id          String    @id @default(uuid())
  unitNumber  String
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  tenantId    String?
  tenant      User?     @relation("TenantUnit", fields: [tenantId], references: [id])
  rentAmount  Decimal
  leaseStart  DateTime?
  leaseEnd    DateTime?
  status      String    // VACANT, OCCUPIED, MAINTENANCE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invoices    Invoice[]
  // Adding service charges for the unit
  serviceCharges ServiceCharge[]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  phone         String
  properties    Property[]
  rentedUnit    Unit[]     @relation("TenantUnit")
  escrowAccount EscrowAccount?
  savingsGoals  SavingsGoal[]
  invoices      Invoice[]
  // Adding new fields for user type and farming specialization
  userType      String    @default("TENANT") // TENANT, LANDLORD, FARMER, SERVICE_AGENT
  farmingType   String?   // For farmers: CROP, LIVESTOCK, MIXED
  farmRentals   FarmRental[]
  maintenanceRequests MaintenanceRequest[]
  sentTransactions EscrowTransaction[] @relation("SenderTransactions")
  receivedTransactions EscrowTransaction[] @relation("ReceiverTransactions")
}

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique
  unitId        String
  unit          Unit      @relation(fields: [unitId], references: [id])
  tenantId      String
  tenant        User      @relation(fields: [tenantId], references: [id])
  amount        Decimal
  dueDate       DateTime
  status        String    // PENDING, PAID, OVERDUE
  items         InvoiceItem[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model InvoiceItem {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  description String
  amount      Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Enhanced model for service charges
model ServiceCharge {
  id          String    @id @default(uuid())
  unitId      String
  unit        Unit      @relation(fields: [unitId], references: [id])
  description String
  amount      Decimal
  frequency   String    // MONTHLY, QUARTERLY, ANNUAL
  nextDueDate DateTime
  status      String    @default("ACTIVE") // ACTIVE, PAID, OVERDUE
  escrowHeld  Decimal   @default(0) // Amount held in escrow for this charge
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payments    ServiceChargePayment[]
}

// New model for service charge payments
model ServiceChargePayment {
  id              String       @id @default(uuid())
  serviceChargeId String
  serviceCharge   ServiceCharge @relation(fields: [serviceChargeId], references: [id])
  amount          Decimal
  paymentDate     DateTime     @default(now())
  status          String       // PENDING, COMPLETED, FAILED
  escrowReleased  Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// New model for maintenance requests
model MaintenanceRequest {
  id          String    @id @default(uuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  tenantId    String
  tenant      User      @relation(fields: [tenantId], references: [id])
  title       String
  description String
  status      String    // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority    String    // LOW, MEDIUM, HIGH, EMERGENCY
  estimatedCost Decimal?
  actualCost    Decimal?
  serviceAgentId String?
  escrowAmount   Decimal @default(0) // Amount held in escrow for this work
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// New model for agricultural land rentals
model FarmRental {
  id          String    @id @default(uuid())
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  farmerId    String
  farmer      User      @relation(fields: [farmerId], references: [id])
  startDate   DateTime
  endDate     DateTime
  rentAmount  Decimal
  farmingPurpose String
  status      String    // ACTIVE, EXPIRED, TERMINATED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Enhanced escrow account model
model EscrowAccount {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  balance   Decimal  @default(0)
  frozenBalance Decimal @default(0) // Amount held for pending transactions
  accountType String @default("GENERAL") // GENERAL, SERVICE_AGENT, LANDLORD
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions EscrowTransaction[]
}

// New model for escrow transactions
model EscrowTransaction {
  id          String        @id @default(uuid())
  fromUserId  String?
  fromUser    User?         @relation("SenderTransactions", fields: [fromUserId], references: [id])
  toUserId    String?
  toUser      User?         @relation("ReceiverTransactions", fields: [toUserId], references: [id])
  escrowAccountId String
  escrowAccount   EscrowAccount @relation(fields: [escrowAccountId], references: [id])
  amount      Decimal
  type        String        // DEPOSIT, WITHDRAWAL, TRANSFER, HOLD, RELEASE
  status      String        // PENDING, COMPLETED, FAILED, HELD
  purpose     String?       // SERVICE_CHARGE, MAINTENANCE, RENT
  description String?
  releaseConditions String? // Conditions for releasing held funds
  scheduledRelease DateTime? // When funds should be automatically released
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model SavingsGoal {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  targetAmount Decimal
  currentAmount Decimal @default(0)
  deadline    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
